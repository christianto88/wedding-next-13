<svg xmlns="http://www.w3.org/2000/svg" width="243" height="369" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><mask id="a" width="243" height="369" x="0" y="0" maskUnits="userSpaceOnUse" style="mask-type:alpha"><path fill="#fff" d="M0 0h243v369H0z"/></mask><g mask="url(#a)"><path fill="#9fa0a1" fill-opacity=".15" d="M-80 588.022c22.4-46.2-3.2-90 6.6-122.4 9.8-32.4 26.4-25.5 51.7-50.3 15.6-15.2 7.3-21.1 35.3-64.8 27.9-43.7 67.2 6.8 70.6-48.8.4-6.3-11.4-37.4 3.4-61.6 35.9-58.9-7.6-72.6 36.5-82 44.1-9.4 43.9-5.5 63.9-47.7s2.4-55.5 51.8-77.5c82.9-36.9 36-31.2 45.9-67.8 9.8-36.6 98 22.1 115.1 103.6 17.1 81.6 47.7 645.8 47.7 645.8L-80 588.022Z"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M99.663 145.474s-.824-.549-7.142-5.585c-6.318-5.036-13.002-3.022-22.25.549-9.34 3.571.732 3.113-14.101 4.487-14.834 1.373-.824 14.376-6.044 13.735-12.91-1.465 1.374 14.467 11.996 22.159 12.27 8.79 19.045 13.551 19.045 13.551 16.573 9.615 23.624 8.424 43.494 9.889 19.869 1.465 26.828-4.853 35.619-5.585 8.79-.733 31.132 61.806 40.288 97.059 14.01 54.023 25.913 129.015 76.457 269.751M163.576 88.52s12.453 8.15 11.262.916c-1.19-7.233 2.015-3.57 8.058-4.486 6.043-1.007 3.296-.458 9.34-4.853 6.043-4.395 11.537-6.41 10.163.458-1.373 6.867-2.93 9.34-7.508 15.291-4.578 6.043 8.699 20.968 8.424 31.956-.275 10.988-6.867 22.068-11.171 29.667-2.93 5.22-3.663 10.53-11.812 22.8"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M175.021 124.781c3.571-7.234 4.304-8.607-.824-17.855-5.127-9.157.916-3.297-6.775-14.102-7.692-10.896-16.208-9.98-24.54-2.563-8.332 7.416-13.826 10.53-17.489 10.621-3.754.092-.732 5.036-2.106 6.318-1.373 1.282-13.277-10.072-17.764-6.501-4.486 3.571-7.233 10.988-10.987 10.805-3.846-.183-9.432 2.564-7.967 6.226 1.465 3.663-3.845 1.191-6.41 4.029-2.655 2.839-9.339 12.728-6.867 17.489"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M175.846 188.602c-8.516 6.684-14.467 10.346-19.961 10.987-10.622 1.191-22.525-6.226-38.641-11.628-16.024-5.403-28.293 10.621-36.077 6.592-6.043-3.113-9.797-16.115-19.595-19.411-8.424-2.839 6.044-15.383 15.841-20.053 10.347-4.853 24.631-7.966 29.942-16.39s7.234-.641 16.024-2.931c8.79-2.289 7.783-6.134 8.79-11.811 1.007-5.678 20.969-9.34 31.957-4.579 10.987 4.762 23.99 14.193 31.132 10.347 7.142-3.754.274 13.094-8.607 24.54-9.065 11.445-2.198 28.934-10.805 34.337Zm0 0c-8.607 5.402-3.846 17.763 2.381 35.71"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M238.476 318.258c.275-11.354 1.191-14.376.458-18.679-.824-4.304-6.684-.367-10.438-5.403 0 0-9.157 4.579-20.694-7.325-11.537-11.903-21.335-18.13-28.66-22.159-7.325-4.029-13.643-7.325-18.496-15.657-4.853-8.333-6.959-10.347 6.959-19.321 13.918-8.973 15.932-17.122 19.595-13.002 0 0-4.304-8.424 2.472-13.826 6.776-5.403 18.13-4.121 21.06-5.219 2.93-1.099 10.164-10.439 21.335-6.776 11.171 3.662 17.58 5.768 24.356 6.684 6.776.916 29.301 4.578 35.619 14.101 6.226 9.523 13.643 2.564 19.137 6.41 5.494 3.754 17.306 15.566 14.01 22.158-3.297 6.501-.916 6.41-11.721 14.559-10.804 8.15-10.896 18.863-13.185 22.8-2.289 3.937-8.058 2.014-10.438 5.128-2.381 3.113-12.545 8.149-23.807 9.248-11.171 1.099-9.89 6.501-19.046 9.065-9.157 2.564-19.503 42.028.366 169.121"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M187.108 216.712c9.889 5.311 24.631 25.272 30.034 33.238 5.402 7.967 17.306 24.815 30.766 25.089 13.46.275 39.098-5.494 43.402-11.628 4.303-6.135 5.219-9.249 13.643-8.974"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M325.097 240.153c-2.747 6.135-6.409 4.395-14.284 8.515-7.966 4.121-7.051 10.439-10.347 15.2-3.296 4.762-12.178 5.769-16.115 11.812-3.938 6.043-17.489 10.53-28.752 11.08-11.354.549-13.643-5.494-18.954-8.333-5.311-2.838-9.431-8.424-16.207-8.058"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M228.496 294.176s3.204-9.156-.733-15.932c-3.937-6.684-7.417-9.065-19.961-12.453-12.636-3.388-11.721-13.002-16.848-8.424-5.128 4.67-9.523 5.128-18.68 3.297M230.236 265.974c-4.304-7.874.091-21.701-.184-16.39-.366 6.227 5.037 16.116 4.945 14.01-.092-2.106 1.282-18.13 2.106-13.094.549 3.845 2.014 15.932 5.128 14.833 3.113-1.098 12.361-19.045 9.431-12.086-3.296 7.874-4.121 11.72-2.198 12.544 1.923.824 14.834-10.347 12.362-6.318-2.564 4.029-6.135 7.325-3.846 6.959 2.289-.458 11.72-4.395 5.402-.549-6.409 3.845-9.706 8.973-9.706 8.973M212.838 209.478c1.923 8.241 6.318 20.511 6.318 20.511"/><path stroke="#9fa0a1" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M269.517 493.422c-42.578-80.028-63.913-96.418-93.671-100.813 0 0 6.684-1.19 8.881-2.014 2.015-.733-23.44-16.574-44.226-11.263 0 0 4.945-6.043 12.362-4.67 0 0-15.383-5.677-36.535-18.862-24.722-15.383-52.833-17.031-52.833-17.031s11.354-1.191 26.646 1.373c21.701 3.663 27.011 12.361 27.011 12.361s-1.648-10.072-7.05-17.122c0 0 6.684 6.776 10.713 13.368 3.113 5.036 7.234 9.248 12.361 12.27 6.135 3.663 14.376 7.966 22.342 10.072 0 0-8.607-11.262-17.489-18.404 0 0 19.137 11.171 32.781 24.631 0 0-4.762-11.812-8.333-15.2 0 0 12.545 11.262 17.764 18.862 5.219 7.6 21.151 12.728 30.766 27.104M216.684 365.323c-22.159-68.125-36.535-83.874-59.152-91.657 0 0 5.311.091 7.234-.183 1.648-.275-16.024-16.299-32.963-15.2 0 0 4.669-3.938 10.347-1.832 0 0-11.263-6.684-25.913-19.869-17.215-15.475-38.916-20.877-38.916-20.877s8.974.732 20.603 5.036c16.481 6.043 19.32 13.552 19.32 13.552s.091-7.966-3.113-14.284c0 0 4.212 6.226 6.501 11.903 1.739 4.304 4.395 8.241 7.966 11.263 4.303 3.754 10.164 8.24 16.024 11.079 0 0-5.128-9.889-11.171-16.757 0 0 13.46 11.446 22.159 23.807 0 0-2.106-9.797-4.396-13.002 0 0 8.241 10.53 11.263 17.214 3.022 6.685 14.742 13.003 20.327 25.456"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M182.255 334.374c1.557-2.931 0-6.135-3.022-7.967 0 0 10.805-13.46-14.742-30.582 0 0-1.282 2.838 1.282 7.508 0 0-10.163-6.867-17.763-7.692 0 0 2.93 11.629 9.614 17.673 0 0-6.593-.092-8.699 0 0 0 2.381 9.797 6.685 12.361 0 0-8.15 1.923-9.981 6.409 0 0 4.12 2.656 10.805 4.487 9.614 2.747 17.214-4.12 17.214-4.12s4.029 4.395 8.607 1.923Z"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M164.492 295.825c-7.784-5.22-20.145-13.552-35.253-15.292-15.108-1.74-13.552 2.839-10.988 6.41 0 0-6.776-.092-4.12 5.86 2.655 5.952 1.282 8.973 2.93 13.46 1.648 4.487 16.298 19.503 28.66 25.73"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M137.113 291.338c-9.522-5.036-18.862-4.395-18.862-4.395M114.497 293.627c2.472 7.875 16.299 20.144 22.342 22.342"/><path stroke="#9fa0a1" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M182.255 334.374c23.624 25.088 63.364 53.931 90.65 168.663"/></g></svg>