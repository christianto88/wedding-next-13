<svg xmlns="http://www.w3.org/2000/svg" width="228" height="369" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><mask id="a" width="228" height="369" x="0" y="0" maskUnits="userSpaceOnUse" style="mask-type:alpha"><path fill="#fff" d="M0 0h228v369H0z"/></mask><g mask="url(#a)"><path fill="#9fa0a1" fill-opacity=".15" d="M230-26.096c-13.947 28.795 1.992 56.093-4.109 76.287-6.102 20.131-16.376 15.83-32.128 31.287-9.713 9.474-4.546 13.151-21.979 40.387-17.372 27.237-41.841-4.238-43.958 30.415-.249 3.927 7.098 23.31-2.117 38.393-22.353 36.71 4.732 45.248-22.726 51.107-27.459 5.858-27.334 3.428-39.787 29.729-12.452 26.302-1.494 34.591-32.252 48.302-51.617 22.999-22.415 19.446-28.58 42.257-6.163 22.811-61.017-13.774-71.664-64.569C-79.947 246.641-99-105-99-105l329 78.904Z"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M50.772 255.175c7.589-8.229 10.332-9.875 12.618-13.624 2.285-3.748-4.663-4.663-4.115-10.789 0 0-9.783-2.56-10.423-18.835-.64-16.274-3.84-27.338-6.583-35.018-2.743-7.772-5.212-14.263-3.292-23.589 1.92-9.326 1.646-12.161 17.83-9.875 16.183 2.286 22.949-2.377 22.949 3.017 0 0 2.377-9.052 10.88-8.686 8.504.457 16.092 8.686 18.927 9.783 2.926 1.098 14.355-1.097 20.206 8.778 5.852 9.966 9.143 15.635 13.532 20.663 4.389 5.029 18.561 22.401 16.915 33.556-1.646 11.155 8.32 10.789 9.966 17.189 1.555 6.4 2.469 22.767-4.206 25.51-6.674 2.743-4.846 4.114-18.195 3.2-13.257-.914-20.389 6.949-24.686 8.412-4.298 1.463-7.223-3.658-11.064-2.926-3.84.731-14.629-2.103-23.589-8.503-8.96-6.401-11.52-1.555-19.932-5.578-8.412-4.023-41.967 18.561-110.816 125.811"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M79.665 146.462c3.748 10.423 1.554 34.744.274 44.162-1.28 9.417-3.566 29.624 6.217 38.584 9.783 8.96 32.367 21.212 39.59 19.475 7.132-1.737 9.875-3.474 15.909 2.195"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M165.793 253.255c-6.034 2.743-7.588-.823-16.092-3.018-8.503-2.102-12.069 3.201-17.646 4.572-5.577 1.372-12.709-3.566-19.566-1.737-6.949 1.92-19.75-3.475-28.436-10.423-8.686-6.949-6.4-12.892-8.503-18.47-2.103-5.486-1.371-12.343-6.674-16.457"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M59.184 230.854s8.412-4.755 9.966-12.252c1.554-7.497.549-11.52-6.583-22.218-7.04-10.698-.092-17.281-6.857-17.189-6.858.091-10.424-2.377-16.001-9.692M78.933 211.013c2.012-8.594 14.355-16.092 10.606-12.252-4.297 4.389-6.857 15.269-5.577 13.624 1.28-1.555 12.892-12.618 10.149-8.412-2.103 3.291-8.96 13.166-5.943 14.355 3.017 1.188 21.578-6.126 14.903-2.835-7.589 3.749-10.697 6.035-9.874 7.955.914 1.92 17.737 1.92 13.257 3.291-4.48 1.372-9.326 1.463-7.314 2.652 2.011 1.189 11.52 4.389 4.297 3.109-7.223-1.28-12.983.365-12.983.365M157.29 224.819c-21.578 8.961-44.71 9.144-44.71 9.144M103.345 157.708c-3.931 7.406-8.777 19.384-8.777 19.384"/><path stroke="#9fa0a1" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M-116 408.689c75.249-48.916 89.695-71.408 91.615-101.032 0 0 1.646 6.4 2.651 8.594.915 1.92 14.447-24.595 7.59-44.527 0 0 6.308 4.297 5.577 11.795 0 0 4.388-15.635 15.634-37.579 13.167-25.692 12.527-53.487 12.527-53.487s2.102 11.063.731 26.332c-1.92 21.669-10.057 27.612-10.057 27.612s9.691-2.468 16.274-8.411c0 0-6.126 7.131-12.252 11.703-4.662 3.474-8.503 7.955-11.063 13.166-3.108 6.309-6.674 14.904-8.137 22.858 0 0 10.332-9.417 16.64-18.835 0 0-9.417 19.841-21.669 34.379 0 0 11.246-5.669 14.263-9.509 0 0-10.057 13.349-17.097 19.2-7.132 5.761-10.88 21.944-24.23 32.733M-53.735 386.471c39.133-59.065 56.962-70.311 80.277-71.682 0 0-5.028-1.372-6.766-2.103-1.462-.732 19.475-11.246 35.202-5.761 0 0-3.383-5.028-9.235-4.48 0 0 12.343-3.383 29.807-12.069 20.39-10.24 42.333-9.6 42.333-9.6s-8.686-1.737-20.755-.732c-17.19 1.372-21.852 7.772-21.852 7.772s2.011-7.68 6.766-12.8c0 0-5.67 4.754-9.326 9.6-2.743 3.657-6.31 6.675-10.515 8.686-5.029 2.377-11.795 5.212-18.104 6.309 0 0 7.498-8.138 14.995-13.075 0 0-15.726 7.315-27.246 16.824 0 0 4.571-8.869 7.588-11.247 0 0-10.606 7.864-15.177 13.441-4.663 5.577-17.372 8.412-25.967 18.926"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M10.633 168.863c3.2-.731 4.663-3.932 4.115-7.315 0 0 17.098-.548 13.715-30.629 0 0-3.018.914-4.846 5.76 0 0-1.28-11.978-5.486-18.195 0 0-6.95 9.6-7.223 18.469 0 0-4.115-4.937-5.486-6.491 0 0-5.943 8.046-5.029 12.891 0 0-6.675-4.845-11.155-3.382 0 0 .64 4.845 3.383 10.971 4.115 8.961 14.08 10.241 14.08 10.241s-.822 5.851 3.932 7.68Z"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M28.554 130.919c-1.006-9.143-2.56-23.681-10.88-36.116-8.23-12.435-10.79-8.32-11.887-4.114 0 0-4.205-5.12-7.04.731-2.834 5.76-6.034 6.675-8.32 10.789-2.286 4.115-4.389 24.687-1.28 37.853"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M14.474 107.604C12.279 97.18 5.788 90.689 5.788 90.689"/><path stroke="#9fa0a1" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M10.633 168.863c-3.931 33.647-.548 81.923-70.037 175.732"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M4.873 218.145c8.046-38.859 44.527-102.13 53.945-100.392 9.417 1.737 15.726 8.503 37.213 8.96 21.486.457 24.595 11.155 43.43 2.469 0 0 13.989-3.841 27.521.457 13.532 4.388 27.247-9.875 20.024-21.944-7.224-12.069 8.228-24.23-7.589-27.338-15.818-3.109-8.778-12.252-18.47-17.098-9.691-4.846-16.64-7.772-23.863-2.926-7.223 4.846-34.287 35.293-34.287 35.293"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M139.461 129.182c10.606-9.144-16.641-14.995-27.521-21.03-10.88-6.034-7.68-13.532-12.526-23.224-4.846-9.691-7.68-1.462-16.915-4.845-9.143-3.383-7.68-7.498-8.229-13.807-.457-6.308-11.338-9.874-23.59-5.851-12.251 4.023-19.84-8.686-27.063-13.532-7.224-4.846-1.738 14.263 6.766 27.52 8.503 13.258 3.657 22.95 12.343 29.716 8.686 6.766 2.194 20.938-6.309 39.773"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M26.726 68.105c-8.138-4.937-19.933-19.292-19.11-31.27.823-11.977 6.035-24.778 1.737-31.727C5.056-1.932.21-3.12-.52-10.709c-.732-7.59 12.526-14.812 18.56-9.418 6.035 5.395 3.11 4.572 9.51 6.309S49.4-1.383 47.297 6.388c-2.103 7.68 7.497 5.578 7.497 5.578"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M45.47 61.248c-3.11-8.23-3.384-27.338 3.108-36.756 6.491-9.509 3.566-12.069 12.983-23.04 9.418-10.973 18.47-9.144 26.698-.275 8.23 8.96 13.715 12.892 17.738 13.44 4.023.458.274 5.578 1.554 7.132 1.372 1.555 15.361-9.509 19.841-5.211 4.48 4.388 6.583 12.709 10.698 12.891 4.114.275 9.874 3.75 7.954 7.59-1.92 3.84 4.023 1.736 6.492 5.12 2.56 3.382 2.194 13.348-6.675 15.726M10.085 6.663c5.394 12.252 7.589 8.046 11.063 19.932 3.383 11.886-11.246 13.44-7.314 18.835 3.84 5.303 1.005 11.978 4.388 15.452M136.901 119.216c3.2-6.949 13.532-13.532 21.578-4.938 8.046 8.595 7.863 9.052 14.446 10.881 8.778 2.377 15.544-5.578 15.909-12.892M104.077 127.444s-5.578-3.84-12.252-3.84c-6.675 0-10.972-3.383-15.91-9.874-4.937-6.492-14.171-9.144-19.84-3.2-5.669 5.943-19.75 33.464-19.75 33.464"/><path stroke="#9fa0a1" stroke-miterlimit="10" d="M70.156 60.79c3.108-8.685.64-13.897 2.286-24.503 1.737-10.606 14.903-15.818 14.903-15.818"/></g></svg>